CPE 203-03
Harumi Hokari

methods left in Functions class:

- adjacent
	- At first glance, I was going to put it into the Point class, but I realized it did not fit well in one class
          over another as it could be associated with multiple classes.

- loadImages
        - will be moved in later projects

- processImageLine
        - will be moved in later projects

- getImages
        - will be moved in later projects

- setAlpha
        - will be moved in later projects

- load
        - will be moved in later projects

- processLine
        - will be moved in later projects

- parseBackground
        - will be moved in later projects 

- parseMiner
        - will be moved in later projects 

- parseObstacle
        - will be moved in later projects

- parseOre
        - will be moved in later projects

- parseSmith
        - will be moved in later projects

- parseVein
        - will be moved in later projects


methods that could have been placed in multiple classes:

- executeAction
- executeAnimationAction
- executeActivityAction
	1) Action class
	2) Because they were originally defined as an "action", it made the most sense to place them here.

- executeMinerFullActivity
- executeMinerNotFullActivity
- executeOreActivity
- executeOreBlobActivity
- executeQuakeActivity
- executeVeinActivity
- transformFull
- transformNotFull
- moveToFull
- moveToNotFull
	1) Entity Class
	2) Although the scheduler might have authority of the flow of activities, I thought each entity should
	   determine their own movements.

- scheduleActions
	1) Entity Class
	2) Reading the name of the method, my first thought was to move it straight away into the EventScheduler
	   Class, yet I noticed the different entities were driving the function as different cases are involved.

- moveEntity
	1) WorldModel Class
	2) This method definitely took some thought because I assumed the entities should be able to move
	   themselves right? However, I determined the world essentially acts as something that oversees the various
  	   entities, so it should be able to affect it.

- createAnimationAction
- createActivityAction
	1) Action Class
	2) Both these methods originally took an Entity object which made sense as each entity possessed their own
   	   unique animations/ activities. Despite that fact, it was much better suited in the Action Class as it is
           still in it's basic form, an action.
